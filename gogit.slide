Go + Git for Rookies
Instituto Superior Técnico, 26 November

[[http://web.ist.utl.pt/joao.leao.guerreiro/][João Guerreiro]]
[[hackerschool.io][HackerSchool]]

joao.guerreiro@hackerschool.tecnico.ulisboa.pt

* Outline

1. Setup
2. What is Go
3. The Basics
4. Practical Exercises
5. Git
6. A little further
7. Practical examples

# Based on talk presented at [[http://javasig.com][NYJavaSIG]] on April 23, 2015.
# The next several slides are from rsc's 2013/distsys and 2015/mit talks.
# Uses many snippets from Go by Example, they are simply the best.

* Workstation Setup
.link https://play.golang.org/
.iframe https://play.golang.org/
.link http://cmder.net/
# tinyurl

.link https://golang.org/dl/
Editors:
- Atom
- Sublime
- Vim (Vim-go)
- Emacs

* What is Go?

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link http://golang.org
.image ./gogit/img/gopher.svg

* History

Design began in late 2007.

- Robert Griesemer, Rob Pike (UTF-8), and Ken Thompson (B).
- Ian Lance Taylor and Russ Cox.

Open source since 2009 with a very active community.
Language stable as of Go 1, early 2012.

* The dudes
.image ./gogit/img/rob_pike.jpg _ 800

* The dudes
.image ./gogit/img/ken_thompson.jpg _ 600

* Why Go?

.image ./gogit/img/funfast.svg

* Who uses Go besides Google?

.link http://golang.org/wiki/GoUsers

Apcera, Bitbucket, bitly, Canonical, CloudFlare, Core OS, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, Heroku, Iron.io, Kubernetes, Medium, MongoDB services, Mozilla services, New York Times, pool.ntp.org, Secret, SmugMug, SoundCloud, Stripe, Square, Thomson Reuters, Tumblr, ...

* Go intentionally leaves out many features

- No classes
- No constructors
- No inheritance
- No exceptions
- No annotations
- No user-defined generics

* Why does Go leave out those features?

Clarity is critical.

When reading code, it should be clear what the program will do.

When writing code, it should be clear how to make the program do what you want.

Sometimes this means writing out a loop instead of invoking an obscure function.

For more background on design:

- [[http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is exponentially more (Pike, 2012)]]
- [[http://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)]]

* Basics

* Data types
.play -edit ./gogit/code/datatypes.go

* Data types
.play -edit ./gogit/code/datatypes2.go

* Data types
.play -edit ./gogit/code/datatypes3.go

* Flow Control
* if
.play -edit ./gogit/code/flow0.go /START1/,/STOP1/

* if
  ==    equal
  !=    not equal
  <     less
  <=    less or equal
  >     greater
  >=    greater or equal

* for
.play -edit ./gogit/code/flow1.go /START1/,/STOP1/

* for
  continue    skip
  break       exit cycle

* while
.play -edit ./gogit/code/flow2.go /START1/,/STOP1/

* switch
.play -edit ./gogit/code/flow3.go /START1/,/STOP1/

* switch
  fallthrough

* Advanced Datatypes
* Arrays
.play -edit ./gogit/code/arrays.go /START1/,/STOP1/

* Slices
.play -edit ./gogit/code/slices.go /START1/,/STOP1/

* Slices
.play -edit ./gogit/code/slices.go /START2/,/STOP2/

* Maps
.play -edit ./gogit/code/maps.go /START1/,/STOP1/

* Maps
.play -edit ./gogit/code/maps.go /START2/,/STOP2/

* Range
.play -edit ./gogit/code/range.go /START1/,/STOP1/

* Range
.play -edit ./gogit/code/range.go /START2/,/STOP2/

* Range
.play -edit ./gogit/code/range.go /START3/,/STOP3/

* Range
.play -edit ./gogit/code/range.go /START4/,/STOP4/

* Detail
.image ./gogit/img/table.png _ 800

* Review time
* Review time
Basic Structure
.code ./gogit/code/review.go /START1/,/STOP1/

* Review time
Types
.code ./gogit/code/review.go /START2/,/STOP2/

* Review time
Arrays
.code ./gogit/code/review.go /START3/,/STOP3/

* Review time
Slices
.code ./gogit/code/review.go /START4/,/STOP4/

* Review time
Flow Control
.code ./gogit/code/review.go /START5/,/STOP5/

* Exercise time
* Exercise time
1.
Write a program that prints numbers from 12 to 0 unless it's 4, 2 or 10
Example output:

  i = 12
  i = 11
  i = 9
  i = 8
  i = 7
  i = 6
  i = 5
  i = 3
  i = 1
  i = 0

* Solved
* Exercise time
1.
.play ./gogit/exercises/1.go /START1/,/STOP1/

* Exercise time
1.
.play ./gogit/exercises/1.go /START2/,/STOP2/

* Exercise time
1.
.play ./gogit/exercises/1.go /START3/,/STOP3/

* Exercise time
2.
Write a program with an array or slice with the following words: "Gate", "Comet" and "Pizza".
Print the first character of the word if the word contains the letter e.
Example Output:

  [Gate Comet Pizza]
  Found one! G
  Found one! C

* Solved
* Exercise time
2.
.play ./gogit/exercises/2.go /START1/,/STOP1/

* Exercise time
2.
.play ./gogit/exercises/2.go /START2/,/STOP2/

* Exercise time
2.
.play ./gogit/exercises/2.go /START3/,/STOP3/

* Exercise time
3.
.code ./gogit/exercises/3.go /START0/,/STOP0/

* Exercise time
3.
Use a map of type int-string to save a dictionary of number names.
From a random number generator (from 0 to 999) print each number in words.
Example output:

  Random Number: 831
  Converted: eight three one

* Solved
* Exercise time
3.
.play ./gogit/exercises/3.go /START1/,/STOP1/

* Exercise time
3.
.play ./gogit/exercises/3.go /START2/,/STOP2/

* Organizing code


* Git
.image ./gogit/img/linus1.jpg

* Git
.image ./gogit/img/linus2.jpg

* Git
.image ./gogit/img/linus3.jpg

* Git
.image ./gogit/img/linus.jpg

* Git
.link https://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf

  git init

* Git basics

.image ./gogit/img/basic-usage.svg

* Git basics
  git add <file>
  git add -A

* Git basics
  git checkout <file>
  git checkout .

  git reset HEAD <file>

  git commit -m "<message>"


* Git basics
  git remote add origin <server>
  git push origin master

  git pull

* Git Branching
  git checkout -b newbranch
  git checkout master
  git branch -d newbranch
  git push origin <branch>

* Git cool
  git log --pretty=oneline
  git log --graph --oneline --decorate --all

* Git we'll talk about it later
  git merge <branch>

* Back to Go

* Functions
* Functions
.play -edit ./gogit/code/functions1.go /START1/,/STOP1/

* Functions
.play -edit ./gogit/code/functions1_1.go /START1/,/STOP1/

* Functions
.play -edit ./gogit/code/functions2.go

* Functions
.play -edit ./gogit/code/functions3.go /START1/,/STOP1/

* Functions
.play -edit ./gogit/code/functions4.go /START1/,/STOP1/

* Functions
.play -edit ./gogit/code/functions5.go /START1/,/STOP1/

* Reference
- slice
- map
- channel
- pointer
- function

* Structs
.play -edit ./gogit/code/structs1.go /START1/,/STOP1/

* Structs
.play -edit ./gogit/code/structs2.go /START1/,/STOP1/

* Structs and pointers
.play -edit ./gogit/code/structs2.go /START2/,/STOP2/

* Methods
.play -edit ./gogit/code/methods1.go /START1/,/STOP1/

* Methods
.play -edit ./gogit/code/methods2.go /START1/,/STOP1/

* Methods
.play -edit ./gogit/code/methods3.go /START1/,/STOP1/

* Interfaces
.play -edit ./gogit/code/interfaces1.go /START1/,/STOP1/

* Interfaces
.play -edit ./gogit/code/interfaces1.go /START2/,/STOP2/

* Interfaces
.play -edit ./gogit/code/interfaces1.go /START3/,/STOP3/

* Interfaces
.play -edit ./gogit/code/interfaces1.go /START4/,/STOP4/

* Practical examples

* Serial
.link https://github.com/bugst/go-serial
.link https://godoc.org/go.bug.st/serial.v1

* Serial
.code ./gogit/fun/serial/serial.go /START1/,/STOP1/

* Serial
.code ./gogit/fun/serial/serial.go /START2/,/STOP2/

* Serial
.code ./gogit/fun/serial/serial.go /START3/,/STOP3/

* Serial
.code ./gogit/fun/serial/serial.go /START4/,/STOP4/

* File I/O

  echo "Python cool"\n"C cooler"\n"Golang coolest" > file.txt

* File I/O - ioutil
.code ./gogit/fun/io/ioutil.go /START1/,/STOP1/

* File I/O - bufio
.code ./gogit/fun/io/bufio.go /START0/,/STOP0/

* File I/O - bufio
.code ./gogit/fun/io/bufio.go /START1/,/STOP1/

* File I/O

  const (
        O_RDONLY int = syscall.O_RDONLY // open the file read-only.
        O_WRONLY int = syscall.O_WRONLY // open the file write-only.
        O_RDWR   int = syscall.O_RDWR   // open the file read-write.
        O_APPEND int = syscall.O_APPEND // append data to the file when writing.
        O_CREATE int = syscall.O_CREAT  // create a new file if none exists.
        O_EXCL   int = syscall.O_EXCL   // used with O_CREATE, file must not exist
        O_SYNC   int = syscall.O_SYNC   // open for synchronous I/O.
        O_TRUNC  int = syscall.O_TRUNC  // if possible, truncate file when opened.
  )




* Where to Go next

Take the Go Tour online.

.link http://tour.golang.org

.link http://exercism.io/

Lots more material.

.link http://golang.org/wiki/Learn

.link https://gobyexample.com/

Great community.

.link http://golang.org/project
