Go + Git for Rookies
Instituto Superior Técnico, 26 November

[[http://web.ist.utl.pt/joao.leao.guerreiro/][João Guerreiro]]
[[hackerschool.io][HackerSchool]]

joao.guerreiro@hackerschool.tecnico.ulisboa.pt

* Outline

1. Setup
2. What is Go
3. The Basics
4. Practical Exercices
5. Concurrency
6. Tools

# Also based on talk presented at [[http://javasig.com][NYJavaSIG]] on April 23, 2015.
# The next several slides are from rsc's 2013/distsys and 2015/mit talks.

* Workstation Setup
.link https://play.golang.org/
.iframe https://play.golang.org/

.link https://golang.org/dl/
Editors:
- Atom
- Sublime
- Vim (Vim-go)
- Emacs

* What is Go?

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link http://golang.org
.image ./gogit/img/gopher.svg

* History

Design began in late 2007.

- Robert Griesemer, Rob Pike (UTF-8), and Ken Thompson (B).
- Ian Lance Taylor and Russ Cox.

Open source since 2009 with a very active community.

Language stable as of Go 1, early 2012.

* Why Go?

.image ./gogit/img/funfast.svg

* Who uses Go besides Google?

.link http://golang.org/wiki/GoUsers

Apcera, Bitbucket, bitly, Canonical, CloudFlare, Core OS, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, Heroku, Iron.io, Kubernetes, Medium, MongoDB services, Mozilla services, New York Times, pool.ntp.org, Secret, SmugMug, SoundCloud, Stripe, Square, Thomson Reuters, Tumblr, ...

* Go intentionally leaves out many features

- No classes
- No constructors
- No inheritance
- No exceptions
- No annotations
- No user-defined generics

* Why does Go leave out those features?

Clarity is critical.

When reading code, it should be clear what the program will do.

When writing code, it should be clear how to make the program do what you want.

Sometimes this means writing out a loop instead of invoking an obscure function.

For more background on design:

- [[http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is exponentially more (Pike, 2012)]]
- [[http://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)]]

* Basics

* Data types

.play -edit ./gogit/code/datatypes.go

* Flow Control
* for
.play -edit ./gogit/code/flow1.go /START1/,/STOP1/
* while
.play -edit ./gogit/code/flow2.go /START1/,/STOP1/

* Arrays



* Examples

* Fetch the search results

#.code go-for-java-programmers/frontend.go /Run the Google search/,/ENDSEARCH/

#.play go-for-java-programmers/frontend.go /A Result contains/,/\)\)/

* Communicating Sequential Processes (Hoare, 1978)

Concurrent programs are structured as independent processes that
execute sequentially and communicate by passing messages.

Sequential execution is easy to understand.  Async callbacks are not.

*Go*primitives:* goroutines, channels, and the `select` statement.

* Goroutines

"Don't communicate by sharing memory, share memory by communicating."

Goroutines are like lightweight threads.

They start with tiny stacks and resize as needed.

Go programs can have hundreds of thousands of them.

Start a goroutine using the `go` statement:

  go f(args)

The Go runtime schedules goroutines onto OS threads.

Blocked goroutines don't use a thread.

* Channels

Channels provide communication between goroutines.

  c := make(chan string)

  // goroutine 1
  c <- "hello!"

  // goroutine 2
  s := <-c
  fmt.Println(s) // "hello!"

* Select

A `select` statement blocks until communication can proceed.

  select {
  case n := <-in:
    fmt.Println("received", n)
  case out <- v:
    fmt.Println("sent", v)
  }

Only the selected case runs.

* Summary

In just a few simple transformations we used Go's concurrency primitives to convert a

- slow
- sequential
- failure-sensitive

program into one that is

- fast
- concurrent
- replicated
- robust.

* Tools

* Go has great tools

- gofmt and goimports
- the go tool
- godoc
- IDE and editor support

The language is designed for tooling.

* gofmt and goimports

Gofmt formats code automatically.  No options.

Goimports updates import statements based on your workspace.

Most people run these tools on save.

.link http://play.golang.org/p/GPqra77cBK

* The go tool

The go tool builds Go programs from source in a conventional directory layout.
No Makefiles or other configs.

Fetch the `present` tool and its dependencies, build it, and install it:

  % go get golang.org/x/tools/cmd/present

Run it:

  % present

* godoc

Generated documentation for the world's open-source Go code:

.link http://godoc.org

* IDE and editor support

Eclipse, IntelliJ, emacs, vim, many others.

- `gofmt`
- `goimports`
- `godoc` lookups
- code completion
- code navigation

There's no "Go IDE".

Go tools meet you where you are.

* Where to Go next

Take the Go Tour online.

.link http://tour.golang.org

.link http://exercism.io/

Lots more material.

.link http://golang.org/wiki/Learn

.link https://gobyexample.com/

Great community.

.link http://golang.org/project
